services:
  postgres:
    image: postgres:15
    container_name: pg
    restart: unless-stopped
    environment:
      POSTGRES_DB: shop
      POSTGRES_USER: shop
      POSTGRES_PASSWORD: shop
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=10
               -c max_replication_slots=10

  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    ports: ["27017:27017"]
    volumes:
      - mongodata:/data/db

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      --maxmemory 256mb
      --maxmemory-policy allkeys-lfu
    ports: [ "6379:6379" ]

  opensearch:
    image: opensearchproject/opensearch:2.14.0
    container_name: opensearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports: ["2181:2181"]

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    stop_grace_period: 20s
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s


  review-analyser:
    build: ./review-analyser
    environment:
      - KAFKA_BOOTSTRAP=${KAFKA_BOOTSTRAP}
      - KAFKA_TOPIC=review-created
      - TARGET=os
      - OS_HOST=${OPENSEARCH_HOST}
      - OS_PORT=${OPENSEARCH_PORT}
      - PROM_PORT=8000
    depends_on:
      - kafka
      - opensearch

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    restart: unless-stopped
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafanadata:/var/lib/grafana

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports: ["3100:3100"]


  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock  # üëà –í–ê–ñ–ù–û
      - ./observability/promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml

  dashboards:
    image: opensearchproject/opensearch-dashboards:2.14.0
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    depends_on:
      - opensearch

  shop:
    build: ./shop
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - KAFKA_BOOTSTRAP=${KAFKA_BOOTSTRAP}
      - OPENSEARCH_URL=${OPENSEARCH_URL}
      - OPENSEARCH_HOST=${OPENSEARCH_HOST}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT}
      - OPENSEARCH_USE_SSL=${OPENSEARCH_USE_SSL}
      - OPENSEARCH_VERIFY_CERTS=${OPENSEARCH_VERIFY_CERTS}
      - OPENSEARCH_INDEX=${OPENSEARCH_INDEX}
      - MONGO_URL=${MONGO_URL}
      - KAFKA_BOOTSTRAP=${KAFKA_BOOTSTRAP}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REDIS_URL=${REDIS_URL}
      - TTL=${TTL}
    depends_on:
      - mongo
      - postgres
      - kafka
      - redis
      - opensearch
    ports: ["8000:8000"]


  kafka-connect:
    build:
      context: ./kafka-connect
    image: kafka-connect-custom
    container_name: kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - opensearch
    restart: unless-stopped
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: "/usr/share/confluent-hub-components,/usr/share/confluent-hub-components/opensearch-connector-for-apache-kafka,/usr/share/java,/usr/local/share/kafka/plugins"

  minio:
      image: minio/minio
      container_name: minio
      environment:
        MINIO_ROOT_USER: minio
        MINIO_ROOT_PASSWORD: minio123
      ports:
        - "19000:9000"
        - "19001:9001"
      command: server /data --console-address ":9001"
      volumes:
        - minio_data:/data

  worker:
      build:
        context: .
        dockerfile: worker/Dockerfile
      container_name: etl_worker
      depends_on:
        kafka:
          condition: service_healthy
        postgres:
          condition: service_started
        minio:
          condition: service_started
        spark:
          condition: service_started
      volumes:
        - ./postgresql-42.6.0.jar:/opt/bitnami/spark/jars/postgresql-42.6.0.jar
      environment:
        KAFKA_SERVER: kafka:9092
        SPARK_MASTER_URL: spark://spark:7077
      working_dir: /app
      command: python worker.py


  spark:
    image: bitnami/spark:latest
    container_name: spark
    depends_on:
      - minio
      - postgres
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./app:/app
      - ./postgresql-42.6.0.jar:/opt/bitnami/spark/jars/postgresql-42.6.0.jar
    working_dir: /app

  spark_worker:
    image: bitnami/spark:latest
    container_name: spark_worker
    depends_on:
      - spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
    ports:
      - "8081:8081"
    volumes:
      - ./app:/app
      - ./postgresql-42.6.0.jar:/opt/bitnami/spark/jars/postgresql-42.6.0.jar
    working_dir: /app

volumes:
  pgdata:
  mongodata:
  grafanadata:
  opensearch-data:
  minio_data: